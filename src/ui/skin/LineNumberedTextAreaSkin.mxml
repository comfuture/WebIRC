<?xml version="1.0" encoding="utf-8"?>
<!--- A skin class for Spark TextArea component that shows line numbers.

@see spark.components.TextArea
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
			 xmlns:s="library://ns.adobe.com/flex/spark"
			 xmlns:mx="library://ns.adobe.com/flex/mx"
			 xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
			 creationComplete="created(event)"
			 alpha.disabled="0.5"
			 blendMode="normal">
	
	<fx:Metadata>
		<![CDATA[ 
		/** 
		* @copy spark.skins.spark.ApplicationSkin#hostComponent
		*/
		[HostComponent("spark.components.TextArea")]
		]]>
	</fx:Metadata>
	
	<fx:Script fb:purpose="styling">
		private var lineBreakChanged:Boolean;
		
		private var paddingChanged:Boolean;
		
		private var verticalAlignChanged:Boolean;
		
		/* Define the skin elements that should not be colorized.
		For text area, the skin itself is colorized but the individual parts are not. */
		static private const exclusions:Array = ["background", "scroller"];
		
		/**
		 * @private
		 */
		override public function get colorizeExclusions():Array {
			return exclusions;
		}
		
		/* Define the content fill items that should be colored by the "contentBackgroundColor" style. */
		static private const contentFill:Array = ["bgFill"];
		
		/**
		 *  @private
		 */
		override public function get contentItems():Array {
			return contentFill
		}
		;
		
		/**
		 *  @private
		 */
		override protected function commitProperties():void {
			super.commitProperties();
			
			if (lineBreakChanged) {
				updateStringStyle("lineBreak");
				lineBreakChanged = false;
				
				if (textDisplay != null) {
					if (getStyle("lineBreak") == "explicit") {
						if (textDisplay.percentWidth == 100) {
							textDisplay.width = NaN;
						}
					} else if (textDisplay.percentWidth != 100) {
						textDisplay.percentWidth = 100;
					}
				}
			}
			if (paddingChanged) {
				updatePadding();
				paddingChanged = false;
			}
			if (verticalAlignChanged) {
				updateStringStyle("verticalAlign");
				verticalAlignChanged = false;
			}
		}
		
		/**
		 * @private
		 */
		override protected function initializationComplete():void {
			useChromeColor = true;
			super.initializationComplete();
		}
		
		/**
		 *  @private
		 */
		override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
			if (getStyle("borderVisible") == true) {
				border.visible = true;
				shadow.visible = true;
				background.left = background.top = background.right = background.bottom = 1;
				scroller.left = scroller.top = scroller.right = scroller.bottom = 1;
			} else {
				border.visible = false;
				shadow.visible = false;
				background.left = background.top = background.right = background.bottom = 0;
				scroller.left = scroller.top = scroller.right = scroller.bottom = 0;
			}
			
			borderStroke.color = getStyle("borderColor");
			borderStroke.alpha = getStyle("borderAlpha");
			
			super.updateDisplayList(unscaledWidth, unscaledHeight);
		}
		
		/**
		 *  @private
		 */
		private function updatePadding():void {
			if (!textDisplay)
				return;
			
			// Push padding styles into the textDisplay
			var padding:Number;
			
			padding = getStyle("paddingLeft");
			if (textDisplay.getStyle("paddingLeft") != padding)
				textDisplay.setStyle("paddingLeft", padding);
			
			padding = getStyle("paddingTop");
			if (textDisplay.getStyle("paddingTop") != padding)
				textDisplay.setStyle("paddingTop", padding);
			
			padding = getStyle("paddingRight");
			if (textDisplay.getStyle("paddingRight") != padding)
				textDisplay.setStyle("paddingRight", padding);
			
			padding = getStyle("paddingBottom");
			if (textDisplay.getStyle("paddingBottom") != padding)
				textDisplay.setStyle("paddingBottom", padding);
		}
		
		/**
		 *  @private
		 */
		private function updateStringStyle(styleName:String):void {
			if (!textDisplay)
				return;
			
			// Push style into the textDisplay
			var style:String;
			
			style = getStyle(styleName);
			if (textDisplay.getStyle(styleName) != style) {
				textDisplay.setStyle(styleName, style);
			}
		}
		
		/**
		 *  @private
		 */
		override public function styleChanged(styleProp:String):void {
			var allStyles:Boolean = !styleProp || styleProp == "styleName";
			
			super.styleChanged(styleProp);
			
			if (allStyles || styleProp.indexOf("lineBreak") == 0) {
				lineBreakChanged = true;
				invalidateProperties();
			}
			if (allStyles || styleProp.indexOf("padding") == 0) {
				paddingChanged = true;
				invalidateProperties();
			}
			if (allStyles || styleProp.indexOf("verticalAlign") == 0) {
				verticalAlignChanged = true;
				invalidateProperties();
			}
		}
	</fx:Script>
	
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			/**
			 * @private
			 */
			private static const focusExclusions:Array = ["textDisplay"];
			
			/**
			 *  @private
			 */
			override public function get focusSkinExclusions():Array {
				return focusExclusions;
			}
			
			protected function created(event:FlexEvent):void {
				updateLineNumbers(event);
				hostComponent.addEventListener(FlexEvent.UPDATE_COMPLETE, updateLineNumbers, false, 0, true);
			}
			
			private var _lines:int = 0;
			
			private function updateLineNumbers(event:Event):void {
				var lines:int = textDisplay.mx_internal::textContainerManager.numLines;
				if (lines != _lines) {
					var old:int = _lines;
					this._lines = lines;
					var diff:int = lines - old;
					var linesString:String;
					var i:int;
					if (diff > 0) {
						linesString = lineNumbersLabel.text;
						for (i = old + 1; i <= _lines; i++) {
							if (i > 1) {
								linesString += "\n";
							}
							linesString += i.toString(10);
						}
					} else {
						linesString = "";
						for (i = 1; i <= _lines; i++) {
							if (i > 1) {
								linesString += "\n";
							}
							linesString += i.toString(10);
						}
					}
					lineNumbersLabel.text = linesString;
				}
			}
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal"/>
		<s:State name="disabled"/>
	</s:states>
	
	<!-- border -->
	<!--- @private -->
	<s:Rect id="border"
			bottom="0"
			left="0"
			right="0"
			top="0">
		<s:stroke>
			<!--- @private -->
			<s:SolidColorStroke id="borderStroke"
								weight="1"/>
		</s:stroke>
	</s:Rect>
	
	<!-- fill -->
	<!--- Defines the appearance of the TextArea component's background. -->
	<s:Rect id="background"
			bottom="1"
			left="1"
			right="1"
			top="1">
		<s:fill>
			<!--- @private Defines the background fill color. -->
			<s:SolidColor id="bgFill"
						  color="0xFFFFFF"/>
		</s:fill>
	</s:Rect>
	
	<!-- shadow -->
	<!--- @private -->
	<s:Rect id="shadow"
			height="1"
			left="1"
			right="1"
			top="1">
		<s:fill>
			<s:SolidColor color="0x000000"
						  alpha="0.12"/>
		</s:fill>
	</s:Rect>
	
	<!--- Defines the scroller that is used to scroll the TextArea control. -->
	<s:HGroup id="textGroup"
			  bottom="0"
			  left="0"
			  right="0"
			  top="0"
			  gap="0">
		<s:Group height="100%">
			<s:Group id="gutter"
					 minWidth="25"
					 verticalScrollPosition="{textDisplay.verticalScrollPosition}"
					 bottom="1"
					 top="0"
					 clipAndEnableScrolling="true">
				<s:Label id="lineNumbersLabel"
						 minWidth="24"
						 color="#999999"
						 fontFamily="{textDisplay.getStyle('fontFamily')}"
						 fontSize="{textDisplay.getStyle('fontSize')}"
						 fontWeight="{textDisplay.getStyle('fontWeight')}"
						 paddingBottom="5"
						 paddingLeft="5"
						 paddingRight="6"
						 paddingTop="5"
						 textAlign="right"/>
			</s:Group>
			<!-- make a gray area the same size as the horizontal scrollbar -->
			<s:Rect height="14"
					includeInLayout="{scroller.horizontalScrollBar.visible}"
					bottom="1"
					left="1"
					right="1">
				<s:fill>
					<s:SolidColor color="#EDEDED"/>
				</s:fill>
			</s:Rect>
			<s:Line width="1"
					bottom="1"
					right="0"
					top="1">
				<s:stroke>
					<s:SolidColorStroke color="#EDEDED"
										weight="1"/>
				</s:stroke>
			</s:Line>
		</s:Group>
		
		<s:Scroller id="scroller"
					height="100%"
					width="100%"
					measuredSizeIncludesScrollBars="false"
					minViewportInset="1">
			<!--- @copy spark.components.supportClasses.SkinnableTextBase#textDisplay -->
			<s:RichEditableText id="textDisplay"
								change="updateLineNumbers(event)"
								valueCommit="updateLineNumbers(event)"/>
		</s:Scroller>
	</s:HGroup>
	
</s:SparkSkin>