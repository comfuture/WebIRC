<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" currentState="server"
		 creationComplete="init()">
	<fx:Script>
		<![CDATA[
			import flashx.textLayout.elements.FlowElement;
			import flashx.textLayout.elements.TextFlow;
			
			import maroo.net.irc.IRCChannel;
			import maroo.net.irc.IRCMessage;
			import maroo.net.irc.IRCPrefix;
			import maroo.net.irc.IRCUser;
			
			import mx.collections.ArrayCollection;
			import mx.utils.ArrayUtil;
			
			import ui.renderer.UserRenderer;
			import ui.util.MessageFormatter;
			
			private var _prefix:IRCPrefix;
			private var queue:Vector.<IRCMessage> = new Vector.<IRCMessage>();

			[Bindable]
			public var users:ArrayCollection = new ArrayCollection();

			[Bindable]
			public function get prefix():IRCPrefix
			{
				return _prefix;
			}
			public function set prefix(value:IRCPrefix):void
			{
				_prefix = value;
				currentState = value.type;
				if (value is IRCChannel) {
					//users.source = ArrayUtil.toArray(IRCChannel(value).users);
					//lstUsers.dataProvider = users;
				}
			}
			
			override public function get label():String
			{
				return prefix.name;
			}
			
			public function init():void
			{
				if (queue.length > 0) {
					for (var i:int = queue.length - 1; i >= 0; i--) {
						appendMessage(queue.shift() as IRCMessage);
					}
				}
			}
			
			public function appendMessage(message:IRCMessage):void
			{
				var el:FlowElement = MessageFormatter.formatMessage(message);
				try {
					history.textFlow.addChild(el);
				} catch (e:Error) {
					queue.push(message);
				}
			}
			
			public function appendText(text:String):void
			{
				var el:FlowElement = MessageFormatter.formatString(text);
				try {
					history.textFlow.addChild(el);
				} catch (e:Error) {
					//
				}
			}
			
			public function addUser(user:IRCUser):void
			{
				if (!users.contains(user))
					users.addItem(user);
			}
			
			public function removeUser(user:IRCUser):void
			{
				if (users.contains(user))
					users.removeItemAt(users.getItemIndex(user));
			}
			
			public function get topic():String
			{
				return txtTopic.text;
			}
			
			public function set topic(value:String):void
			{
				txtTopic.text = value;
			}
		]]>
	</fx:Script>
	<s:states>
		<s:State name="channel"/>
		<s:State name="user"/>
		<s:State name="server"/>
	</s:states>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:layout>
		<s:HorizontalLayout/>
	</s:layout>
	
	<s:Group width="100%" height="100%" id="view">
		<s:layout>
			<s:VerticalLayout/>
		</s:layout>
		<s:Label id="txtTopic" width="100%" height="20" verticalAlign="middle" paddingLeft="10"
				 backgroundColor="0xEEEEEE" includeIn="channel,user"/>
		<s:Scroller width="100%" height="100%" id="scroller" minViewportInset="1" focusEnabled="false">
			<s:Group width="100%" height="100%" clipAndEnableScrolling="true" id="chatView">
				<s:RichText id="history" width="100%" paddingLeft="10" paddingTop="5">
				</s:RichText>
			</s:Group>
		</s:Scroller>
	</s:Group>
	<s:List width="200" height="100%" id="lstUsers" dataProvider="{users}" itemRenderer="ui.renderer.UserRenderer" includeIn="channel"></s:List>
</s:NavigatorContent>
